var questback = questback || {};
questback.popup = new (function () {
  const e = 767;
  const t = 991;
  const n = 1199;
  const i = 'questback';
  const o = 'questback_listener';
  const a = 1e3;
  const r = [];
  let d = [];
  let l = null;
  const s = new Object();
  function c(e, t, n, o, a) {
    const r = a ? '' : ' ';
    let l = '';
    o && (l = u(e, 'theme', o)), (l != null && void 0 !== l) || (l = '');
    const c = `.${i}.qb-popup-${e.index}${r}${t.replace(
      /\./g,
      `.${e.cssPrefix}`
    )}`;
    o &&
      (function (e, t) {
        s[e] || (s[e] = t);
      })(o, c),
      d.push(`${c}{${n}${l}}`);
  }
  function p(e, t) {
    let n = '';
    let i = '';
    for (const o in s)
      k((n = u(e, 'theme', o + t))) || ((i = s[o]), d.push(`${i}{${n}}`));
  }
  function m(e, t, n) {
    for (
      let o = [
          '@-webkit-keyframes',
          '@-moz-keyframes',
          '@-o-keyframes',
          '@keyframes'
        ],
        a = 0;
      a < o.length;
      a++
    ) {
      const r = o[a];
      d.push(`${r} ${i}-${e.index}-${e.cssPrefix}${t} {${n}}`);
    }
  }
  function h(e, t, n, o) {
    for (
      var a = [
          '-webkit-animation-name',
          '-moz-animation-name',
          '-o-animation-name',
          'animation-name'
        ],
        r = [],
        d = 0;
      d < a.length;
      d++
    ) {
      const l = a[d];
      r.push(`${l}: ${i}-${e.index}-${e.cssPrefix}${n};`);
    }
    r.push(
      `-webkit-animation-fill-mode: both;-moz-animation-fill-mode: both;-ms-animation-fill-mode: both;-o-animation-fill-mode: both;animation-fill-mode: both;-webkit-animation-duration:${o}ms;-moz-animation-duration:${o}ms;-ms-animation-duration:${o}ms;-o-animation-duration:${o}ms;animation-duration: ${o}ms;`
    ),
      c(e, t, r.join('') + u(e, 'theme', 'stateDisplayed'));
  }
  function u(e) {
    let t = '';
    let n = !1;
    t = e;
    for (let i = 1; i < arguments.length; i++) {
      if (void 0 === (t = t[arguments[i]])) {
        n = !0;
        break;
      }
    }
    return n ? '' : t;
  }
  function f(e, t) {
    const n = u(e, 'theme', t);
    let i = 500;
    return (
      n &&
        (i = u(e, 'theme', t, 'duration')) == null &&
        (i = n.type == 'none' ? 0 : 500),
      i
    );
  }
  function y() {
    window.focus(),
      window.moveBy(0, 0),
      document.location.hash &&
        (document.location.href = unescape(
          document.location.hash.split(`${o}_`)[1]
        ));
  }
  function v() {
    try {
      window.opener
        ? window.opener.closed == 1
          ? y()
          : window.opener.location.href && window.opener.document.body
          ? window.setTimeout(v, a)
          : y()
        : y();
    } catch (e) {
      y();
    }
  }
  function g() {
    return void 0 === window.pageYOffset
      ? Math.max(document.documentElement.scrollTop, document.body.scrollTop)
      : window.pageYOffset;
  }
  function b() {
    return void 0 === window.pageXOffset
      ? Math.max(document.documentElement.scrollLeft, document.body.scrollLeft)
      : window.pageXOffset;
  }
  function w(e, t) {
    const n = u(e, 'theme', t);
    if (n) {
      if (n.type == 'none') return '';
      if (n.type == 'fade-in') return '0% {opacity: 0;} 100% {opacity: 1;}';
      if (n.type == 'fade-out') return '0% {opacity: 1;} 100% {opacity: 0;}';
      if (n.type == 'rotate-in')
        return '0% {opacity: 0;transform: rotate(360deg) scale(0);} 100% {opacity: 1;transform: rotate(0deg) scale(1);}';
      if (n.type == 'slide-from-left')
        return '0% {opacity: 0;transform: translateX(-50%);} 50%{opacity: 1;} 100% {opacity: 1;transform: translateX(0);}';
      if (n.type == 'slide-from-right')
        return '0% {opacity: 0;transform: translateX(50%);} 50%{opacity: 1;} 100% {opacity: 1;transform: translateX(0);}';
      if (n.type == 'slide-from-top')
        return '0% {opacity: 0;transform: translateY(-50%);} 50%{opacity: 1;} 100% {opacity: 1;transform: translateY(0);}';
      if (n.type == 'slide-from-bottom')
        return '0% {opacity: 0;transform: translateY(50%);} 50%{opacity: 1;} 100% {opacity: 1;transform: translateY(0);}';
      if (n.type == 'scale-in')
        return '0% {opacity: 0;transform: scale(0);} 100% {opacity: 1;transform: scale(1);}';
      if (n.type == 'rotate-out')
        return '0% {opacity: 1;transform: rotate(0deg) scale(1);} 100% {opacity: 0;transform: rotate(360deg) scale(0);}';
      if (n.type == 'scale-out')
        return '0% {opacity: 1;transform:scale(1);} 100% {opacity: 0;transform: scale(0);}';
      if (n.type == 'slide-to-left')
        return '0% {opacity: 1;transform: translateX(0);} 50% {opacity: 0;} 100% {opacity: 0;transform: translateX(-50%);}';
      if (n.type == 'slide-to-right')
        return '0% {opacity: 1;transform: translateX(0);} 50% {opacity: 0;} 100% {opacity: 0;transform: translateX(50%);}';
      if (n.type == 'slide-to-top')
        return '0% {opacity: 1;transform: translateY(0);} 50% {opacity: 0;} 100% {opacity: 0;transform: translateY(-50%);}';
      if (n.type == 'slide-to-bottom')
        return '0% {opacity: 1;transform: translateY(0);} 50% {opacity: 0;} 100% {opacity: 0;transform: translateY(50%);}';
      if (n.type == 'custom') return u(e, 'theme', t, 'css');
    }
    return '0% {opacity: 0;} 100% {opacity: 1;}';
  }
  function x(e) {
    if (e === null || typeof e !== 'object') return e;
    const t = e.constructor();
    for (const n in e) t[n] = x(e[n]);
    return t;
  }
  function k(e) {
    return !(typeof e === 'string' && e.length > 0);
  }
  function A(e, t) {
    return N(t).cssPrefix + e;
  }
  function M(e) {
    const t = document.createElement('div');
    if (
      ((t.className = `questback qb-popup-${e.index} ${A(
        'container',
        e.index
      )}`),
      e.theme.backdrop)
    ) {
      const n = document.createElement('div');
      (n.className = A('backdrop', e.index)), t.appendChild(n);
    }
    let i;
    let o;
    let a;
    const r = document.createElement('div');
    if (
      ((r.className = A('wrapper', e.index)), t.appendChild(r), e.closeButton)
    ) {
      const d = document.createElement('div');
      d.className = A('wrapper-bar', e.index);
      const l = document.createElement('a');
      (l.className = A('close-button', e.index)),
        e.closeButton.text
          ? (l.innerHTML = e.closeButton.text)
          : (l.innerHTML = '&times'),
        (o = 'click'),
        (a = function () {
          return questback.popup.hide(e.index), !1;
        }),
        (i = l).addEventListener
          ? i.addEventListener(o, a, !1)
          : i.attachEvent && i.attachEvent(`on${o}`, a),
        d.appendChild(l),
        r.appendChild(d);
    }
    const s = document.createElement('div');
    (s.className = A('content', e.index)), r.appendChild(s);
    const c = document.createElement('span');
    (c.className = A('demo', e.index)),
      (c.innerHTML = 'Demo'),
      r.appendChild(c);
    let p = null;
    if (e.theme.logo.url) {
      (p = document.createElement('div')).className = A(
        'logo-container',
        e.index
      );
      const m = document.createElement('img');
      (m.className = A('logo', e.index)),
        (m.src = e.theme.logo.url),
        p.appendChild(m);
    }
    p == null ||
      (e.theme.logo.vAlign != 'top' && e.theme.logo.vAlign != 'middle') ||
      s.appendChild(p);
    const h = document.createElement('div');
    (h.className = A('heading', e.index)),
      (h.innerHTML = e.title),
      s.appendChild(h),
      p != null && e.theme.logo.vAlign == 'bottom' && s.appendChild(p);
    const u = document.createElement('div');
    (u.className = A('text', e.index)),
      (u.innerHTML = e.text),
      s.appendChild(u);
    const f = document.createElement('div');
    f.className = A('buttons', e.index);
    const y = [];
    if (e.buttons)
      for (let v = 0; v < e.buttons.length; v++) {
        const g = e.buttons[v];
        y.push(
          `<button class='${A('button', e.index)} ${A(
            g.type,
            e.index
          )}' onclick='return questback.popup.handleButtonClick(event,${
            e.index
          },${v});'>${g.text}</button>`
        );
      }
    return (f.innerHTML = y.join('')), s.appendChild(f), t;
  }
  function N(e) {
    return (
      void 0 === e && (e = 0),
      (e < 0 || e >= r.length) &&
        (console.log(
          `Error: Could not find index ${e}, default to last entry.`
        ),
        (e = r.length - 1)),
      r[e]
    );
  }
  function E(e) {
    return N(e).container;
  }
  function C(e) {
    const t = N(e);
    return t.theme.backdrop
      ? t.container.childNodes[1]
      : t.container.childNodes[0];
  }
  function H(e) {
    for (let t = C(e).childNodes, n = 0; n < t.length; n++) {
      if (`${t[n].className}`.indexOf('content') != -1) return t[n];
    }
  }
  function T(e, t, n) {
    if (n) {
      const i = new Date();
      i.setTime(i.getTime() + 24 * n * 60 * 60 * 1e3);
      var o = `; expires=${i.toGMTString()}`;
    } else o = '';
    document.cookie = `${e}=${t}${o}; path=/`;
  }
  function q(e) {
    for (
      let t = `${e}=`, n = document.cookie.split(';'), i = 0;
      i < n.length;
      i++
    ) {
      for (var o = n[i]; o.charAt(0) == ' '; ) o = o.substring(1, o.length);
      if (o.indexOf(t) == 0) return o.substring(t.length, o.length);
    }
    return null;
  }
  function W(e, t) {
    const n = C(e.index);
    const i = H(e.index);
    const o = i.clientWidth;
    const a = i.clientHeight;
    const r = n.clientWidth;
    const d = n.clientHeight;
    (n.style.height = `${d}px`),
      (n.className += ` ${A('state-embedded-display', e.index)}`),
      (i.innerHTML = ''),
      (e.frame = document.createElement('iframe')),
      (e.frame.className = A('survey-frame', e.index));
    const l = document.documentElement.clientWidth || document.body.clientWidth;
    const s =
      document.documentElement.clientHeight || document.body.clientHeight;
    let c = e.display.width ? e.display.width : r;
    let p = e.display.height ? e.display.height : d;
    typeof p === 'string' &&
      (p =
        p.indexOf('%') != -1
          ? (s * parseFloat(p.replace('%', ''))) / 100
          : parseInt(p.replace('px', ''))),
      typeof c === 'string' &&
        (c =
          c.indexOf('%') != -1
            ? (l * parseFloat(c.replace('%', ''))) / 100
            : parseInt(c.replace('px', ''))),
      window.devicePixelRatio > 1 ||
      (window.matchMedia &&
        window.matchMedia(
          '(-webkit-min-device-pixel-ratio: 1.5),(-moz-min-device-pixel-ratio: 1.5),(min-device-pixel-ratio: 1.5)'
        ).matches)
        ? ((l < s && l <= 640) || (l > s && l <= 960)) && ((c = l), (p = s))
        : ((l < s && l <= 320) || (l > s && l <= 480)) && ((c = l), (p = s));
    let m = r + c - o;
    let h = d + p - a;
    m > l && ((c -= m - l), (m = l)), h > s && ((p -= h - s), (h = s));
    let u = e.position.x;
    let f = e.position.y;
    m > r && (u -= Math.round(m - r) / 2),
      h > d && (f -= Math.round(h - d) / 2),
      (u = b() + Math.max(Math.min(u, l - m), 0)),
      (f = g() + Math.max(Math.min(f, s - h), 0)),
      (n.style.left = `${u}px`),
      (n.style.top = `${f}px`),
      (e.position.x = u),
      (e.position.y = f),
      (i.className = A('content-embedded', e.index)),
      (i.style.width = `${c}px`),
      (i.style.height = `${p}px`),
      i.appendChild(e.frame),
      (n.style.width = `${m}px`),
      (n.style.height = `${h}px`),
      setTimeout(() => {
        (e.frame.src = t),
          setTimeout(() => {
            !(function e(t) {
              if (t.frame)
                try {
                  if (t.frame.contentWindow.location.href) {
                    const n = t.frame.contentWindow.location.href;
                    if (n != 'about:blank' && n != '')
                      return void questback.popup.hide(t.index);
                  }
                  setTimeout(() => {
                    e(t);
                  }, 100);
                } catch (n) {
                  setTimeout(() => {
                    e(t);
                  }, 100);
                }
            })(e);
          }, 1e3);
      }, 500);
  }
  function z(e) {
    e.containerAdded &&
      (document.body.removeChild(e.container),
      (e.containerAdded = !1),
      (e.container = null)),
      (e.state = null);
  }
  return {
    init(i) {
      if (!i.initiated) {
        !(function (e) {
          if (void 0 === e.identifier) {
            let t = null;
            if (e.buttons)
              for (let n = 0; n < e.buttons.length; n++) {
                const i = e.buttons[n];
                if (i.type == 'participate' && i.url) {
                  t = i.url;
                  break;
                }
              }
            let o = e.index;
            if (t) {
              const a = t.replace(/[^\w]/g, '');
              a
                ? (o = a)
                : console.log(
                    'Warning: Unable to create identifier from url. Please explicitly set identifier to a unique identifier (string) for the survey in the config.'
                  );
            }
            e.identifier = `qb${o}`;
          }
          if (
            (e.cssPrefix == null && (e.cssPrefix = 'qb-'),
            void 0 === e.display && (e.display = { type: 'tab' }),
            (e.display.type != 'window' && e.display.type != 'embedded') ||
              (void 0 === e.display.width && (e.display.width = 800),
              void 0 === e.display.height && (e.display.height = 600)),
            void 0 === e.redisplayAfterDays && (e.redisplayAfterDays = 365),
            void 0 === e.cookieName &&
              (e.cookieName = `questback.popup.${e.identifier}`),
            void 0 === e.displayFraction && (e.displayFraction = 1),
            e.display.type == 'embedded'
              ? e.closeButton || (e.closeButton = !0)
              : e.display.type == 'window' &&
                (void 0 === e.display.width &&
                  (width = Math.min(800, screen.width)),
                void 0 === e.display.height &&
                  (e.type.height = Math.min(600, screen.height))),
            void 0 === e.width && (e.width = 500),
            void 0 === e.left && (e.left = '50%'),
            void 0 === e.top && (e.top = '50%'),
            l != null && void 0 !== e.theme)
          ) {
            const r = x(e.theme);
            for (const d in ((e.theme = x(l)), r)) e.theme[d] = r[d];
          }
          void 0 === e.theme && (e.theme = l != null ? x(l) : {}),
            void 0 === e.theme.shadow && (e.theme.shadow = !0),
            void 0 === e.theme.showAnimation && (e.theme.showAnimation = {}),
            void 0 === e.theme.showAnimation.type &&
              (e.theme.showAnimation.type = 'fade-in'),
            void 0 === e.theme.showAnimation.duration &&
              (e.theme.showAnimation.duration =
                e.theme.showAnimation.type == 'none' ? 0 : 500),
            void 0 === e.theme.hideAnimation && (e.theme.hideAnimation = {}),
            void 0 === e.theme.hideAnimation.type &&
              (e.theme.hideAnimation.type = 'fade-out'),
            void 0 === e.theme.hideAnimation.duration &&
              (e.theme.hideAnimation.duration =
                e.theme.hideAnimation.type == 'none' ? 0 : 500),
            void 0 === e.theme.buttonAlignment &&
              (e.theme.buttonAlignment = 'center'),
            void 0 === e.theme.logo && (e.theme.logo = {}),
            void 0 === e.theme.logo.align && (e.theme.logo.align = 'left'),
            void 0 === e.theme.logo.vAlign && (e.theme.logo.vAlign = 'top');
        })(i),
          (function (i) {
            (d = []).push('.questback *{box-sizing:border-box;}'),
              i.theme.backdrop &&
                c(
                  i,
                  '.backdrop',
                  'background-color:#404040;background:rgba(0,0,0,0.3);position:absolute;top:0;left:0;bottom:0;right:0;display:none;z-index:100000;',
                  'backdrop'
                ),
              c(
                i,
                '.onleave-container',
                'position:absolute;left:0;top:0;width:100%;height:100%;bottom:0;right:0;background:#FFFFFF;z-index:100000;',
                'onleaveContainer'
              ),
              c(
                i,
                '.onleave-content',
                'margin-top:40px;margin-left:auto;margin-right:auto;width:400px;max-width:90%;text-align:center;',
                'onleaveContent'
              ),
              c(i, '.onleave-image', 'margin-bottom:10px;', 'onleaveContainer'),
              c(
                i,
                '.onleave-message',
                'font-family:Helvetica,​Arial,​sans-serif;font-size:18px;',
                'onleaveContainer'
              ),
              c(
                i,
                '.content',
                'padding:30px 50px;margin:0;width:auto;height:auto;border:none;background:#f5f5f5;',
                'content'
              ),
              c(
                i,
                '.content-embedded',
                'margin:0;border:none;margin-left:auto;margin-right:auto;contentEmbedded'
              ),
              c(
                i,
                '.wrapper',
                `z-index:100001;font-size:14px;display:none;border:none;${
                  i.theme.shadow
                    ? 'box-shadow:5px 5px 20px rgba(0,0,0,0.2);'
                    : ''
                }font-family:Helvetica,​Arial,​sans-serif;background:#ffffff;position:absolute;max-width:100%;left:-10000px;top:-10000px;padding:10px;position:absolute;`,
                'wrapper'
              ),
              c(
                i,
                '.state-embedded-display',
                '-webkit-transition: all 0.5s;transition: all 0.5s;'
              ),
              c(
                i,
                '.wrapper-bar',
                'text-align:right;font-size:1.75em;padding:0 5px 5px 0;',
                'wrapperBar'
              ),
              c(
                i,
                '.survey-frame',
                'border:none;width:100%;height:100%;',
                'surveyFrame'
              ),
              c(
                i,
                '.close-button',
                'cursor:pointer;line-height:1em;text-decoration:none;background:none;',
                'closeButton'
              ),
              c(
                i,
                '.close-button:hover',
                'cursor:pointer;line-height:1em;text-decoration:none;background:none;',
                'closeButtonHover'
              ),
              c(
                i,
                '.heading',
                'font-size:4em;word-wrap: break-word;font-weight:normal;margin:0 0 0.5em 0;',
                'heading'
              ),
              c(
                i,
                '.demo',
                'font-size:18px;font-weight:bold;background:#fff;color: red;position: absolute;top: 5px;border: 2px solid;padding: 5px 15px;right: 5px;',
                'demo'
              ),
              c(
                i,
                '.logo-container',
                i.theme.logo.vAlign == 'middle'
                  ? i.theme.logo.align == 'left'
                    ? 'float:left;margin-right:1em;'
                    : 'float:right;margin-left:1em;'
                  : `text-align:${i.theme.logo.align};`,
                'logoContainer'
              ),
              c(i, '.logo', 'max-width:100%;', 'logo'),
              c(i, '.text', 'font-size:1em;font-weight:normal;', 'text'),
              c(
                i,
                '.buttons',
                `margin-top:20px;text-align:${i.theme.buttonAlignment};`,
                'buttons'
              ),
              c(
                i,
                '.button',
                'transition: all 0.25s;font-family:inherit;text-align:center;font-size:14px;min-width:150px;background:#e0e0e0;margin:5px;padding:0px 10px;line-height:48px;border:none;cursor:pointer;',
                'button'
              ),
              c(i, '.button:hover', 'filter: brightness(105%);', 'buttonHover'),
              c(
                i,
                '.participate',
                'background:#1acd72;transition: all 0.25s;color:#000000;',
                'participate'
              ),
              c(i, '.participate:hover', '', 'participateHover'),
              c(i, '.decline', '', 'decline'),
              c(i, '.decline:hover', '', 'declineHover'),
              c(i, '.other', '', 'other'),
              c(i, '.other:hover', '', 'otherHover'),
              m(i, 'show-animation', w(i, 'showAnimation')),
              m(i, 'hide-animation', w(i, 'hideAnimation'));
            const o = u(i, 'theme', 'showAnimation', 'type');
            const a = f(i, 'showAnimation');
            o != 'none' && h(i, '.state-displayed', 'show-animation', a);
            const r = u(i, 'theme', 'hideAnimation', 'type');
            const l = f(i, 'hideAnimation');
            r != 'none' && h(i, '.state-hidden', 'hide-animation', l),
              d.push(`@media (max-width: ${n}px) { `),
              p(i, 'MD'),
              d.push('}'),
              d.push(`@media (max-width: ${t}px) { `),
              p(i, 'SM'),
              d.push('}'),
              p(i, 'XS'),
              d.push(`@media (max-width: ${e}px) { `),
              c(i, '.content', 'padding:10px 10px;'),
              c(i, '.heading', 'font-size:2.5em;'),
              p(i, 'XS'),
              d.push('}');
            let s = '';
            if (typeof i.theme.imports === 'string')
              s = `@import url('${i.theme.imports}');`;
            else if (i.theme.imports instanceof Array)
              for (let y = i.theme.imports.length, v = 0; v < y; v++)
                s += `@import url('${i.theme.imports[v]}');`;
            const g = s + d.join('\n') + u(i, 'theme', 'customCSS');
            if (void 0 === document.createStyleSheet) {
              const b = document.createElement('style');
              (b.type = 'text/css'), b.appendChild(document.createTextNode(g));
              try {
                (
                  document.head || document.getElementsByTagName('head')[0]
                ).appendChild(b);
              } catch (e) {
                document.body.childNodes.length == 0
                  ? document.body.appendChild(b)
                  : document.body.insertBefore(b, document.body.childNodes[0]);
              }
            } else document.createStyleSheet('').cssText = g;
          })(i);
        const o = M(i);
        (i.container = o), (i.initiated = !0);
      }
      return i.container;
    },
    setTheme(e) {
      l = e;
    },
    participate(e) {
      void 0 === e && (e = 0);
      const t = N(e);
      z(t);
      const n = M(t);
      if (((t.container = n), !t.state || t.state !== 'participate')) {
        for (var i = -1, o = 0; o < t.buttons.length; o++) {
          if (t.buttons[o].type === 'participate') {
            i = o;
            break;
          }
        }
        t.display.type == 'embedded'
          ? questback.popup.show(e, !0, () => {
              i >= 0 && questback.popup.handleButtonClick(null, e, i);
            })
          : i >= 0 && questback.popup.handleButtonClick(null, e, i);
      }
    },
    invite(e) {
      void 0 === e && (e = 0);
      const t = N(e);
      z(t), (t.state && t.state === 'invite') || questback.popup.show(e, !0);
    },
    handleButtonClick(e, t, n) {
      const i = N(t);
      if (i.buttons) {
        const a = i.buttons[n];
        if (a.type === 'decline') questback.popup.hide(i.index);
        else if (
          a.type === 'participate' &&
          ((i.state = 'participate'), i.display)
        ) {
          if (i.display.type == 'embedded') return void W(i, a.url);
          if (i.display.type == 'window')
            return (
              (function (e, t) {
                const n =
                  window.screenLeft != null ? window.screenLeft : screen.left;
                const i =
                  window.screenTop != null ? window.screenTop : screen.top;
                (width = window.innerWidth
                  ? window.innerWidth
                  : document.documentElement.clientWidth
                  ? document.documentElement.clientWidth
                  : screen.width),
                  (height = window.innerHeight
                    ? window.innerHeight
                    : document.documentElement.clientHeight
                    ? document.documentElement.clientHeight
                    : screen.height);
                let o = e.display.width ? e.display.width : width;
                let a = e.display.height ? e.display.height : height;
                typeof o === 'string' &&
                  (o =
                    o.indexOf('%') != -1
                      ? (width * parseFloat(o.replace('%', ''))) / 100
                      : parseInt(o.replace('px', ''))),
                  typeof a === 'string' &&
                    (a =
                      a.indexOf('%') != -1
                        ? (height * parseFloat(a.replace('%', ''))) / 100
                        : parseInt(a.replace('px', ''))),
                  (o = Math.min(width, o)),
                  (a = Math.min(height, a));
                const r = width / 2 - o / 2 + n;
                const d = height / 2 - a / 2 + i;
                const l = window.open(
                  t,
                  '_blank',
                  `menubar=0, resizable=1, scrollbars=1, toolbar=0, width=${o}, height=${a}, top=${d}, left=${r}`
                );
                window.focus && l.focus();
              })(i, a.url),
              void questback.popup.hide(i.index)
            );
          if (i.display.type == 'tab')
            return (
              window.open(a.url, '_blank'), void questback.popup.hide(i.index)
            );
          if (i.display.type == 'onleave') {
            const r = `${document.location.href}#${o}_${escape(a.url)}`;
            return (
              window.open(r, '_blank').blur(),
              void questback.popup.hide(i.index)
            );
          }
        }
        k(a.url) || window.open(a.url),
          a.callback && (e && (e.config = a), a.callback(e, E(i.index)));
      }
    },
    hide(e) {
      const t = N(e);
      const n = t.container;
      const i = (H(e), C(e));
      (i.className = i.className.replace(A('state-displayed', e), '')),
        (i.className += ` ${A('state-hidden', e)}`);
      const o = f(N(e), 'hideAnimation');
      n &&
        (o == 0
          ? z(t)
          : setTimeout(() => {
              z(t);
            }, o));
    },
    hideAll(e) {
      for (let t = 0; t < r.length; t++) z(r[t]);
    },
    show(e, t, n) {
      const i = N(e);
      if (!i.state || i.state !== 'invite') {
        let o;
        let a;
        let r = !1;
        if (Math.random() <= 1 * i.displayFraction) {
          r = !0;
          const d = new Date();
          if (
            (void 0 !== i.activePeriodStart && (r = d >= i.activePeriodStart),
            void 0 !== i.activePeriodEnd)
          ) {
            const l = new Date(i.activePeriodEnd);
            l.setDate(l.getDate() + 1), (r = d < l);
          }
          r = !(function (e) {
            return (
              !e.disableCookies &&
              (q(`${e.cookieName}.s`) == 'displayed' ||
                q(`${e.cookieName}.p`) == 'displayed')
            );
          })(i);
        }
        if (r || t) {
          i.containerAdded ||
            (i.container || (i.container = M(i)),
            document.body.appendChild(i.container),
            (i.containerAdded = !0)),
            t ||
              (function (e) {
                e.disableCookies ||
                  (T(`${e.cookieName}.s`, 'displayed'),
                  e.redisplayAfterDays > 0 &&
                    T(`${e.cookieName}.p`, 'displayed', e.redisplayAfterDays));
              })(i);
          const s = E(e);
          const c = C(e);
          const p = (function (e) {
            const t = N(e);
            return t.theme.backdrop ? t.container.childNodes[0] : null;
          })(e);
          if (
            (s && (s.style.display = 'block'),
            p &&
              ((p.style.display = 'block'),
              (p.style.width =
                ((o = document.body),
                (a = document.documentElement),
                `${Math.max(
                  o.scrollWidth,
                  o.offsetWidth,
                  a.clientWidth,
                  a.scrollWidth,
                  a.offsetWidth
                )}px`)),
              (p.style.height = `${(function () {
                const e = document.body;
                const t = document.documentElement;
                return Math.max(
                  e.scrollHeight,
                  e.offsetHeight,
                  t.clientHeight,
                  t.scrollHeight,
                  t.offsetHeight
                );
              })()}px`)),
            c)
          ) {
            let m;
            let h;
            (c.style.display = 'block'), (i.state = 'invite');
            const u =
              document.documentElement.clientWidth || document.body.clientWidth;
            const f =
              document.documentElement.clientHeight ||
              document.body.clientHeight;
            const y = i.width;
            (c.style.width = typeof y === 'string' ? y : `${y}px`),
              void 0 !== i.height &&
                (typeof i.height === 'string'
                  ? (c.style.height = i.height)
                  : (c.style.height = `${i.height}px`));
            const v = function () {
              (c.className = c.className.replace(A('state-hidden', e), '')),
                (c.className += ` ${A('state-displayed', e)}`),
                (h =
                  typeof i.top === 'string'
                    ? i.top.indexOf('%') != -1
                      ? (f * parseFloat(i.top.replace('%', ''))) / 100
                      : parseInt(i.top.replace('px', ''))
                    : i.top),
                (m =
                  typeof i.left === 'string'
                    ? i.left.indexOf('%') != -1
                      ? (u * parseFloat(i.left.replace('%', ''))) / 100
                      : parseInt(i.left.replace('px', ''))
                    : i.left),
                (m =
                  b() +
                  Math.max(
                    Math.min(
                      m - Math.round(c.clientWidth / 2),
                      u - c.clientWidth
                    ),
                    0
                  )),
                (h =
                  g() +
                  Math.max(
                    Math.min(
                      h - Math.round(c.clientHeight / 2),
                      f - c.clientHeight
                    ),
                    0
                  )),
                (c.style.top = `${h}px`),
                (c.style.left = `${m}px`),
                (i.position = {}),
                (i.position.x = m),
                (i.position.y = h),
                n && n();
            };
            i.theme.showAnimation.type == 'none'
              ? v()
              : setTimeout(v, i.theme.showAnimation.duration + 100);
          }
        }
      }
    },
    standardConfig(e, t, n, i, o) {
      return {
        title: e,
        text: t,
        buttons: [
          { type: 'participate', text: i, url: n },
          { type: 'decline', text: o }
        ]
      };
    },
    create(e, t, n) {
      let i;
      let d;
      let l;
      if (
        (typeof e === 'string'
          ? ((d = e), (i = t), (l = n))
          : ((i = e), (l = t)),
        void 0 !== l && (t.theme = l),
        d && i.buttons)
      )
        for (let s = 0; s < i.buttons.length; s++) {
          const c = i.buttons[s];
          c.type == 'participate' && (c.url || (c.url = d));
        }
      if (
        ((i.index = r.length),
        r.push(i),
        questback.popup.init(i),
        document.location.hash &&
          document.location.hash.toLowerCase().indexOf(o) != -1)
      )
        !(function (e) {
          let t = 'https://web2.questback.com/Style/images/logo.png';
          e.display.onleaveLogoUrl && (t = e.display.onleaveLogoUrl);
          let n = 'Survey will open here when you leave the site.';
          e.display.onleaveMessage && (n = e.display.onleaveMessage);
          let i = 'QuestBack Survey';
          e.display.onleaveTitle && (i = e.display.onleaveTitle),
            (document.title = i),
            (document.body.innerHTML = `<div class="questback qb-popup-${
              e.index
            }"><div class="${A('onleave-container', e.index)}"><div class="${A(
              'onleave-content',
              e.index
            )}"><img class="${A(
              'onleave-image',
              e.index
            )}" src=${t} /><p class="${A(
              'onleave-message',
              e.index
            )}">${n}</p></div></div></div>`);
        })(t),
          window.opener.focus(),
          window.blur(),
          window.opener && window.opener.closed == 0 && window.setTimeout(v, a);
      else if (!1 !== i.autoDisplay) {
        const p = i.delay > 0 ? 1e3 * i.delay : 500;
        setTimeout(() => {
          questback.popup.show(i.index);
        }, p);
      }
    }
  };
})();
